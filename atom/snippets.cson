# LANGUAGE Fortran -------------------------------------------------------------------
'.source.fortran.free':
  'type':
    'prefix': 'st'
    'body': 'type ( $1) :: $2'
  'type intent':
    'prefix': 'sti'
    'body': 'type ( $1), intent( $2) :: $3'
  'type in':
    'prefix': 'stin'
    'body': 'type ( $1), intent ( in ) :: $2'
  'type out':
    'prefix': 'stout'
    'body': 'type ( $1), intent ( out ) :: $2'
  'type inout':
    'prefix': 'stino'
    'body': 'type ( $1), intent ( inout ) :: $2'

  'class':
    'prefix': 'sc'
    'body': 'class ( $1) :: $2'
  'class intent':
    'prefix': 'sci'
    'body': 'class ( $1), intent ( $2) :: $3'
  'class in':
    'prefix': 'sclin'
    'body': 'class ( $1), intent ( in ) :: $2'
  'class out':
    'prefix': 'sclout'
    'body': 'class ( $1), intent ( out ) :: $2'
  'class inout':
    'prefix': 'sclino'
    'body': 'class ( $1), intent ( inout ) :: $2'

  'integer':
    'prefix': 'si'
    'body': 'integer :: $1'
  'integer intent':
    'prefix': 'sii'
    'body': 'integer, intent ( $1) :: $2'
  'integer in':
    'prefix': 'siin'
    'body': 'integer, intent ( in ) :: $1'
  'integer out':
    'prefix': 'siout'
    'body': 'integer, intent ( out ) :: $1'
  'integer inout':
    'prefix': 'siino'
    'body': 'integer, intent ( inout ) :: $1'

  'real':
    'prefix': 'sr'
    'body': 'real ( kind=$1) :: $2'
  'real intent':
    'prefix': 'sri'
    'body': 'real ( kind=$1), intent ( $2) :: $3'
  'real in':
    'prefix': 'srin'
    'body': 'real ( kind=$1), intent ( in ) :: $2'
  'real out':
    'prefix': 'srout'
    'body': 'real ( kind=$1), intent ( out ) :: $2'
  'real inout':
    'prefix': 'srino'
    'body': 'real ( kind=$1), intent ( inout ) :: $2'

  'character':
    'prefix': 'sch'
    'body': 'character ( len=$1) :: $2'
  'character intent':
    'prefix': 'schi'
    'body': 'character ( len=$1), intent ( $2) :: $3'
  'character in':
    'prefix': 'schin'
    'body': 'character ( len=$1), intent ( in ) :: $2'
  'character out':
    'prefix': 'schout'
    'body': 'character ( len=$1), intent ( out ) :: $2'
  'character inout':
    'prefix': 'schino'
    'body': 'character ( len=$1), intent ( inout ) :: $2'

  'logical':
    'prefix': 'sl'
    'body': 'logical :: $1'
  'logical intent':
    'prefix': 'sli'
    'body': 'logical, intent ( $1) :: $2'
  'logical in':
    'prefix': 'slin'
    'body': 'logical, intent ( in ) :: $1'
  'logical out':
    'prefix': 'slout'
    'body': 'logical, intent ( out ) :: $1'
  'logical intout':
    'prefix': 'slino'
    'body': 'logical, intent ( inout ) :: $1'

  'subroutine':
    'prefix': 'ssub'
    'body': """
    subroutine $1 ( $2)
      implicit none

      $3
    end subroutine $1
    """

  'Fortran Test File':
    'prefix': 'test'
    'body': """
    logical function $1() result ( failed )
      use $2
      use rhyme_assertion

      implicit none

      type ( assertion_t ) :: $3

      $3 = .describe. "$4"

      call $3%expect( $5 )

      failed = $3%failed()
    end function $1
    """


  'do loop':
    'prefix': 'sdo'
    'body': """
    do $1= $2, $3
      $4
    end do
    """

  'if condition':
    'prefix': 'sif'
    'body': """
    if ( $1) then
      $2
    end if
    """
  'If Failed Return':
    'prefix': 'sifr'
    'body': 'if ( $1) return'

  'implicit none':
    'prefix': 'simp'
    'body': 'implicit none'

  'class subroutine':
    'prefix': 'scsub'
    'body': """
    subroutine $1 ( this$2)
      implicit none

      class ( $3), intent ( $4) :: this
      $5
    end subroutine $1
    """

  'class function':
    'prefix': 'scfunc'
    'body': """
    function $1 ( this$2) result ( $3)
      implicit none

      class ( $4), intent ( $5) :: this
      $6
    end function $1
    """

  'submodule':
    'prefix': 'ssubmod'
    'body': """
    submodule ( $1) $1$2
    contains
      $3
    end submodule $1$2
    """

  'test describe':
    'prefix': 'tdesc'
    'body': '$1 = .describe. "$2"'

  'test expect':
    'prefix': 'texp'
    'body': 'call $1%expect( $2 )'

  'test failed':
    'prefix': 'tfail'
    'body': 'failed = $1%failed()'

  'test reset':
    'prefix': 'treset'
    'body': 'call $1%reset'
