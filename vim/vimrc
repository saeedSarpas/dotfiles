call plug#begin('~/.vim/plugged')
Plug 'scrooloose/nerdtree'
Plug 'tpope/vim-fugitive'
Plug 'junegunn/vim-easy-align'
Plug 'itchyny/lightline.vim'
Plug 'arcticicestudio/nord-vim'
call plug#end()

"Lightline
set laststatus=2
"if !has('gui_running')
"  set t_Co=256
"endif
let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'gitbranch': 'FugitiveHead'
      \ },
      \ }


"NerdTree
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists('s:std_in') | NERDTree | endif
" Open the existing NERDTree on each new tab.
autocmd BufWinEnter * silent NERDTreeMirror


"80 characters line wrap
set colorcolumn=80
set textwidth=80

""Colorscheme
colorscheme nord
set background=dark

"Key binding
imap jk <ESC>
"
""Fonts
set guifont=Inconsolata\ 11

"GUI window maps
nmap <tab> <C-w><C-w>
nmap <SPACE>w/ <C-w>v
nmap <SPACE>w- <C-w>s

nmap <SPACE><SPACE> <C-w><C-w>
nmap <SPACE>wh <C-w>h
nmap <SPACE>wj <C-w>j
nmap <SPACE>wk <C-w>k
nmap <SPACE>wl <C-w>l

nmap <SPACE>wH <C-w>H
nmap <SPACE>wJ <C-w>J
nmap <SPACE>wK <C-w>K
nmap <SPACE>wL <C-w>L

nmap <SPACE>w> <C-w>20>
nmap <SPACE>w< <C-w>20<

nmap <SPACE>tt :tabe<CR>
nmap 0 ^

""Comments
nmap <SPACE>;; ,c<SPACE>
vmap <SPACE>; ,c<SPACE>

"Paste
"set nopaste
"
""LaTeX and PdfLaTeX
nmap comp :!pdflatex %<CR>

"NerdTree maps
nmap <SPACE>ff :NERDTree<SPACE>.<CR>
nmap no :NERDTreeTabsOpen<CR>

""Save and Exit
nmap <SPACE>wd :q<CR>
nmap <SPACE>fs :w<CR>

"Align
vmap t :'<,'>Tab /=<CR>

""Tab and indentation
filetype plugin indent on
set shiftwidth=2
set softtabstop=2
set expandtab
set copyindent
set preserveindent

"Vimrc
nmap <SPACE>feR :so $MYVIMRC<CR>
"
""ng attribute in HTML
"let g:syntastic_html_tidy_ignore_errors=[" proprietary attribute \"ng-"]
"
""Line number
function! NumberToggle()
    if(&relativenumber == 1)
        set number
    else
        set relativenumber
    endif
endfunc
nnoremap <C-n> :call NumberToggle()<cr>

